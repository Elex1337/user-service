// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/Elex1337/user-service/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: createDTO
func (_m *UserService) CreateUser(createDTO dto.CreateUserDTO) (dto.UserResponseDTO, error) {
	ret := _m.Called(createDTO)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 dto.UserResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateUserDTO) (dto.UserResponseDTO, error)); ok {
		return rf(createDTO)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateUserDTO) dto.UserResponseDTO); ok {
		r0 = rf(createDTO)
	} else {
		r0 = ret.Get(0).(dto.UserResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateUserDTO) error); ok {
		r1 = rf(createDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserService) DeleteUser(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserService) GetUserByID(id int) (dto.UserResponseDTO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 dto.UserResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (dto.UserResponseDTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) dto.UserResponseDTO); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.UserResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: updateDTO
func (_m *UserService) UpdateUser(updateDTO dto.UpdateUserDTO) (dto.UserResponseDTO, error) {
	ret := _m.Called(updateDTO)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 dto.UserResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UpdateUserDTO) (dto.UserResponseDTO, error)); ok {
		return rf(updateDTO)
	}
	if rf, ok := ret.Get(0).(func(dto.UpdateUserDTO) dto.UserResponseDTO); ok {
		r0 = rf(updateDTO)
	} else {
		r0 = ret.Get(0).(dto.UserResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(dto.UpdateUserDTO) error); ok {
		r1 = rf(updateDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
